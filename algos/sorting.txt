# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
def factorial(num):
    if (num == 0):
        return 1
    else:
        return num * factorial(num - 1)

res = factorial(5)
print(res)

list1 = [2,1,0,5,3,9,7]

max1 = list1[0]

for i in list1:
    if i > max1:
        max1 = i
    else:
        pass
print(max1)

nums = [1, 2, 3, 2, 1, 3, 2, 4, 5, 4]

def countfreq(nums):
    freq = {}
    for i in nums:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq
    
print(countfreq(nums))

def checkPrime(num):
    if (num < 2):
        return False
    for i in range(2,int(num**0.5) + 1):
        if (num % i == 0):
            return False
    return True
    
print(checkPrime(15))

list_a = [1, 2, 3, 4, 5]
list_b = [4, 5, 6, 7, 8]

def checkLists(list_a,list_b):
    common = []
    for i in list_a:
        if i in list_b:
            common.append(i)
    return common
    
print(checkLists(list_a,list_b))

def bubbleSort(list_a):
    n = len(list_a)
    count = 0
    for i in range(n):
        for j in range(n - i - 1):
            # count+=1
            # print(count," ",i, " ",j," ",n - i- 1)
            if (list_a[j] > list_a[j+1]):
                list_a[j],list_a[j+1] = list_a[j+1],list_a[j]
    return list_a
list_a = [9,2,0,1,7,4,8,9]
print(bubbleSort(list_a))

arr = [9,2,0,1,7,4,8,9]
def insertionSort(arr):
    n = len(arr) - 1
    
    for i in range(1,n):
        j = i - 1
        key = arr[i]
        while(j >= 0 and key < arr[j]):
            arr[j+1] = arr[j]
            j = j - 1
        arr[j+1] = key
    return arr
print(insertionSort(arr))

def quickSort(arr, low, high):
    if low < high:
        pi = partition(arr,low,high)
        quickSort(arr,low,pi - 1)
        quickSort(arr,pi + 1,high)

def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    
    for j in range(low,high):
        if (arr[j] < pivot):
            i += 1
            swap(arr,i,j)
    
    swap(arr,i + 1,high)
    return i
    
    
def swap(arr, i, j):
    arr[i], arr[j] = arr[j], arr[i]
    
arr = [10, 7, 8, 9, 1, 5]
n = len(arr)
quickSort(arr,0,n - 1)
print(arr)
        